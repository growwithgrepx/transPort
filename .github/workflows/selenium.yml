name: Selenium UI Tests

on:
  push:
    branches: [fleet-enhancements]
  pull_request:
    branches: [fleet-enhancements]

# Add permissions for the workflow
permissions:
  contents: read
  pages: write
  id-token: write
  checks: write
  pull-requests: write

jobs:
  selenium-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: docker build -t selenium-tests .

      - name: Run tests and output results
        run: |
          mkdir -p test_results
          docker run --rm -v ${{ github.workspace }}/test_results:/app/test_results selenium-tests

      - name: Publish Test Results Summary
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Selenium Tests
          path: test_results/results.xml
          reporter: java-junit
          fail-on-error: true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: selenium-test-results-${{ github.run_number }}
          path: test_results/
          retention-days: 30

      - name: Deploy HTML Report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test_results
          destination_dir: selenium-reports/${{ github.run_number }}

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              let comment = `## üß™ Selenium Test Results - Run #${{ github.run_number }}\n\n`;
              
              // Add link to HTML report
              comment += `üìä **HTML Report**: [View detailed report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/selenium-reports/${{ github.run_number }}/report.html)\n\n`;
              
              // Add basic test summary from XML
              const xmlPath = path.join('test_results', 'results.xml');
              if (fs.existsSync(xmlPath)) {
                const xml = fs.readFileSync(xmlPath, 'utf8');
                const testMatch = xml.match(/tests="(\d+)"/);
                const failureMatch = xml.match(/failures="(\d+)"/);
                const errorMatch = xml.match(/errors="(\d+)"/);
                
                if (testMatch) {
                  const total = testMatch[1];
                  const failures = failureMatch ? failureMatch[1] : '0';
                  const errors = errorMatch ? errorMatch[1] : '0';
                  const passed = total - failures - errors;
                  
                  comment += `**Summary**: ${passed}/${total} tests passed`;
                  if (failures > 0 || errors > 0) {
                    comment += ` ‚ùå (${failures} failures, ${errors} errors)`;
                  } else {
                    comment += ` ‚úÖ`;
                  }
                }
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error posting comment:', error);
            }